# The following is a file to be called after this point by a print_help.sh to
# output a "help" function for GPUE that outputs all possible command-line
# options for GPUE
                                      GPUE
          Graphics-Processing Unit Gross--Piteavskii Equation solver
Options:

-A rotation     Set gauge field mode [beta]
-a              Set flag to graph [deprecated]
-b 2.5e-5       Set box size (xyzMax in 3d)
-C 0            Set device (Card) for GPU computing
-c 2            Set coords (1, 2, 3 dimensions)
-D 0.0          Set's offset for kill (-K flag) distance radially
-d data         Set data directory - where to store / read data (here in data/)
-E 0.0001 123   Perform energy calculations, exit groundstate simulations early
                    The calculation frequency defaults to printSteps.
                    Otherwise the threshold and frequency must be given.
-e 1            Set esteps, number of real-time evolution steps
-f              Unset write to file flag
-G 1            Set GammaY, ratio of omega_y to omega_x
-g 1            Set gsteps, number of imaginary-time evolution steps
-H phrase       Print help menu, searching for "phrase"
-h              Print help menu, exit GPUE
-I "param.cfg"  Set Input parameter file
-i 1            Set interaction strength between particles
-j 1            Set threshold multiplier for easier vortex detection 
-J              Set cylindrical coordinate output for B-field (no letters)
-K 0            Selects vortex with specified ID to be 
                    killed/flipped/mutliply-charged
-k 0            Set kick_it, kicking for Moire lattice simulations
                    0 = off, 1 = periodic kicking, 2 = single kick
-L 0            Set l, vortex winding [2*pi*L]
-l              Set ang_mom flag to use angular momentum
-m              Set 2d_mask for vortex tracking
-N 1            Set N, number of wavefunctions to simulate
-n 1            Set n, number of particles in simulation
-O 0            Set angle_sweep, kicking potential rotation angle
-P 0            Set laser_power, strength of kicking [hbar * omega_perp]
-p 100          Set printSteps, frequency of printing
-Q 0            Set z0_shift, z shift of kicking potential (bad flag, I know)
-q 0            Set the vortex winding for imprinting/annihilation/flipping 
                    during real-time. The value is the charge of the new vortex
-R 1            Set ramping flag for imaginary time evolution
                    1 for ramping up, 0 for ramping down
-r              Set read_file to continue simulation from file (data/output.h5)
                    All flags will be the same, and parser args supersede those from file
-S 0            Set sepMinEpsilon, kicking potential lattice spacing scaling
-s              Set gpe, flag for using Gross-Pitaevskii Equation
-T 1e-4         Set gdt, timestep for imaginary-time
-t 1e-4         Set dt, timestep for real-time
-U 0            Set x0_shift, x shift of kicking potential, shift of the 
                    imprinting vortex position defined by K and q
-u              Performs all unit tests
-V 0            Set y0_shift, y shift of kicking potential, shift of the 
                    imprinting vortex position defined by K and q
-v              Set potential [beta]
-W              Set write_it, flag to write to file
-w 0            Set Omega_z, rotation rate relative to omega_perp
                    This acts as a value to multiply the gauge fields by
-X 6.283        Set omega_x
-x 256          Set xDim, dimension in X (power of 2, please!)
-Y 6.283        Set omega_y
-y 256          Set yDim, dimension in Y (power of 2, please!)
-Z 6.283        Set omega_z, confinement in z-dimension
-z 256          Set zDim, dimension in Z (power of 2, please!)


Notes:

- Parameters specified above represent the default values for the classic 
  linear Schrodinger equation and may need to be modified to match your
  specific problem.

- We use real units with an Rb87 condensate

- You may generate a simple vortex lattice in 2d with the following command:
  ./gpue -x 512 -y 512 -g 50000 -e 1 -p 5000 -W -w 0.6 -n 1e5 -s -l -Z 100

- Thanks for using GPUE!
